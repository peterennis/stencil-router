/**
* This is an autogenerated file created by the Stencil compiler.
* It contains typing information for all components that exist in this project.
*/
/* tslint:disable */

import { JSXElements } from '@stencil/core';

import '@stencil/state-tunnel'
import {
  HistoryType,
  LocationSegments,
  MatchResults,
  RouterHistory,
  RouteViewOptions,
} from './global/interfaces';


declare namespace StencilComponents {

  interface StencilAsyncContent {
    'documentLocation': string;
  }
  interface StencilAsyncContentAttributes extends JSXElements.HTMLAttributes {
    'documentLocation'?: string;
  }

  interface StencilRouterRedirect {
    'history': RouterHistory;
    'root': string;
    'url': string;
  }
  interface StencilRouterRedirectAttributes extends JSXElements.HTMLAttributes {
    'history'?: RouterHistory;
    'root'?: string;
    'url'?: string;
  }

  interface StencilRouteLink {
    'activeClass': string;
    'anchorClass': string;
    'anchorRole': string;
    'anchorTabIndex': string;
    'anchorTitle': string;
    'ariaHaspopup': string;
    'ariaLabel': string;
    'ariaPosinset': string;
    'ariaSetsize': number;
    /**
    * Custom tag to use instead of an anchor
    */
    'custom': string;
    'exact': boolean;
    'history': RouterHistory;
    'id': string;
    'location': LocationSegments;
    'root': string;
    'strict': boolean;
    'url': string;
    'urlMatch': string | string[];
  }
  interface StencilRouteLinkAttributes extends JSXElements.HTMLAttributes {
    'activeClass'?: string;
    'anchorClass'?: string;
    'anchorRole'?: string;
    'anchorTabIndex'?: string;
    'anchorTitle'?: string;
    'ariaHaspopup'?: string;
    'ariaLabel'?: string;
    'ariaPosinset'?: string;
    'ariaSetsize'?: number;
    /**
    * Custom tag to use instead of an anchor
    */
    'custom'?: string;
    'exact'?: boolean;
    'history'?: RouterHistory;
    'id'?: string;
    'location'?: LocationSegments;
    'root'?: string;
    'strict'?: boolean;
    'url'?: string;
    'urlMatch'?: string | string[];
  }

  interface StencilRouteTitle {
    'title': string;
    'titleSuffix': string;
  }
  interface StencilRouteTitleAttributes extends JSXElements.HTMLAttributes {
    'title'?: string;
    'titleSuffix'?: string;
  }

  interface StencilRoute {
    'component': string;
    'componentProps': { [key: string]: any };
    'componentUpdated': (options: RouteViewOptions) => void;
    'exact': boolean;
    'group': string | null;
    'groupMatch': MatchResults | null;
    'history': RouterHistory;
    'historyType': HistoryType;
    'location': LocationSegments;
    'routeRender': Function;
    'routeViewsUpdated': (options: RouteViewOptions) => void;
    'scrollTopOffset': number;
    'url': string | string[];
  }
  interface StencilRouteAttributes extends JSXElements.HTMLAttributes {
    'component'?: string;
    'componentProps'?: { [key: string]: any };
    'componentUpdated'?: (options: RouteViewOptions) => void;
    'exact'?: boolean;
    'group'?: string | null;
    'groupMatch'?: MatchResults | null;
    'history'?: RouterHistory;
    'historyType'?: HistoryType;
    'location'?: LocationSegments;
    'routeRender'?: Function;
    'routeViewsUpdated'?: (options: RouteViewOptions) => void;
    'scrollTopOffset'?: number;
    'url'?: string | string[];
  }

  interface StencilRouter {
    'historyType': HistoryType;
    'root': string;
    'scrollTopOffset': number;
    'titleSuffix': string;
  }
  interface StencilRouterAttributes extends JSXElements.HTMLAttributes {
    'historyType'?: HistoryType;
    'root'?: string;
    'scrollTopOffset'?: number;
    'titleSuffix'?: string;
  }

  interface StencilRouteSwitch {
    'group': string;
    'location': LocationSegments;
    'routeViewsUpdated': (options: RouteViewOptions) => void;
    'scrollTopOffset': number;
  }
  interface StencilRouteSwitchAttributes extends JSXElements.HTMLAttributes {
    'group'?: string;
    'location'?: LocationSegments;
    'routeViewsUpdated'?: (options: RouteViewOptions) => void;
    'scrollTopOffset'?: number;
  }
}

export interface LocalIntrinsicElements {
  'stencil-async-content': StencilComponents.StencilAsyncContentAttributes;
  'stencil-router-redirect': StencilComponents.StencilRouterRedirectAttributes;
  'stencil-route-link': StencilComponents.StencilRouteLinkAttributes;
  'stencil-route-title': StencilComponents.StencilRouteTitleAttributes;
  'stencil-route': StencilComponents.StencilRouteAttributes;
  'stencil-router': StencilComponents.StencilRouterAttributes;
  'stencil-route-switch': StencilComponents.StencilRouteSwitchAttributes;
}

declare global {

  interface HTMLStencilAsyncContentElement extends StencilComponents.StencilAsyncContent, HTMLStencilElement {}
  var HTMLStencilAsyncContentElement: {
    prototype: HTMLStencilAsyncContentElement;
    new (): HTMLStencilAsyncContentElement;
  };

  interface HTMLStencilRouterRedirectElement extends StencilComponents.StencilRouterRedirect, HTMLStencilElement {}
  var HTMLStencilRouterRedirectElement: {
    prototype: HTMLStencilRouterRedirectElement;
    new (): HTMLStencilRouterRedirectElement;
  };

  interface HTMLStencilRouteLinkElement extends StencilComponents.StencilRouteLink, HTMLStencilElement {}
  var HTMLStencilRouteLinkElement: {
    prototype: HTMLStencilRouteLinkElement;
    new (): HTMLStencilRouteLinkElement;
  };

  interface HTMLStencilRouteTitleElement extends StencilComponents.StencilRouteTitle, HTMLStencilElement {}
  var HTMLStencilRouteTitleElement: {
    prototype: HTMLStencilRouteTitleElement;
    new (): HTMLStencilRouteTitleElement;
  };

  interface HTMLStencilRouteElement extends StencilComponents.StencilRoute, HTMLStencilElement {}
  var HTMLStencilRouteElement: {
    prototype: HTMLStencilRouteElement;
    new (): HTMLStencilRouteElement;
  };

  interface HTMLStencilRouterElement extends StencilComponents.StencilRouter, HTMLStencilElement {}
  var HTMLStencilRouterElement: {
    prototype: HTMLStencilRouterElement;
    new (): HTMLStencilRouterElement;
  };

  interface HTMLStencilRouteSwitchElement extends StencilComponents.StencilRouteSwitch, HTMLStencilElement {}
  var HTMLStencilRouteSwitchElement: {
    prototype: HTMLStencilRouteSwitchElement;
    new (): HTMLStencilRouteSwitchElement;
  };

  interface HTMLElementTagNameMap {
    'stencil-async-content': HTMLStencilAsyncContentElement
    'stencil-router-redirect': HTMLStencilRouterRedirectElement
    'stencil-route-link': HTMLStencilRouteLinkElement
    'stencil-route-title': HTMLStencilRouteTitleElement
    'stencil-route': HTMLStencilRouteElement
    'stencil-router': HTMLStencilRouterElement
    'stencil-route-switch': HTMLStencilRouteSwitchElement
  }

  interface ElementTagNameMap {
    'stencil-async-content': HTMLStencilAsyncContentElement;
    'stencil-router-redirect': HTMLStencilRouterRedirectElement;
    'stencil-route-link': HTMLStencilRouteLinkElement;
    'stencil-route-title': HTMLStencilRouteTitleElement;
    'stencil-route': HTMLStencilRouteElement;
    'stencil-router': HTMLStencilRouterElement;
    'stencil-route-switch': HTMLStencilRouteSwitchElement;
  }
}


import { DefaultIntrinsicElements } from '@stencil/core';

declare global {
  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends LocalIntrinsicElements, DefaultIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends JSXElements.HTMLAttributes {}
}

export declare function defineCustomElements(window: any): void;